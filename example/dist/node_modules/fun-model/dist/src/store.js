define(["require", "exports", './helpers', './debug'], function (require, exports, h, d) {
    var state = null;
    var stateSeparator = '.';
    var rootStateKey = '';
    exports.rootCursor = {
        key: rootStateKey
    };
    exports.bootstrap = function (defaultState, subStateSeparator) {
        if (subStateSeparator === void 0) { subStateSeparator = '.'; }
        stateSeparator = subStateSeparator;
        state = defaultState;
    };
    exports.getState = function (cursor) {
        var getInnerState = function (innerState, path) {
            if (path.length === 0)
                return innerState;
            var subPath = path.shift();
            checkSubstate(innerState, subPath, cursor.key);
            return getInnerState(innerState[subPath], path);
        };
        checkDefaultStateAndCursor(cursor);
        return (cursor.key === rootStateKey
            ? state
            : getInnerState(state, cursor.key.split(stateSeparator)));
    };
    exports.setState = function (cursor, updatedState) {
        var setInnerState = function (innerState, path) {
            if (path.length === 0)
                return updatedState;
            var subPath = path.shift();
            checkSubstate(innerState, subPath, cursor.key);
            var newSubState = setInnerState(innerState[subPath], path);
            if (newSubState === innerState[subPath])
                return innerState;
            var newState = h.shallowCopy(innerState);
            newState[subPath] = newSubState;
            return newState;
        };
        checkDefaultStateAndCursor(cursor);
        state =
            cursor.key === rootStateKey
                ? updatedState
                : setInnerState(state, cursor.key.split(stateSeparator));
        d.log('Current state:', state);
    };
    function checkSubstate(s, subPath, cursorKey) {
        if (s[subPath] === undefined)
            throw "State for cursor key (" + cursorKey + ") does not exist.";
    }
    function checkDefaultStateAndCursor(cursor) {
        if (state === null)
            throw 'Default state must be set before first usage through bootstrap(defaultState, () => { yourRenderCallback(); }).';
        if (cursor.key === null)
            throw 'Cursor key cannot be null.';
    }
});
