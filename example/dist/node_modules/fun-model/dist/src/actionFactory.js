define(["require", "exports", './store', './debug'], function (require, exports, s, d) {
    var render = null;
    exports.bootstrap = function (renderCallback) {
        render = renderCallback;
        d.log('Action factory has been initialized.');
    };
    exports.createAction = function (cursor, handler) {
        return (function (params) {
            validateRenderCallback();
            if (changeState(cursor, handler, params)) {
                render();
                d.log('Rendering invoked...');
            }
        });
    };
    exports.createActions = function () {
        var pairs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            pairs[_i - 0] = arguments[_i];
        }
        return (function (params) {
            validateRenderCallback();
            var changed = false;
            for (var i in pairs)
                if (pairs.hasOwnProperty(i)) {
                    var pair = pairs[i];
                    if (changeState(pair.cursor, pair.handler, params))
                        changed = true;
                }
            changed && render();
        });
    };
    function validateRenderCallback() {
        if (render === null)
            throw 'Render callback must be set before first usage through bootstrap(defaultState, () => { yourRenderCallback(); }).';
    }
    function changeState(cursor, handler, params) {
        var oldState = s.getState(cursor);
        var newState = handler(oldState, params);
        if (oldState === newState)
            return false;
        s.setState(cursor, newState);
        d.log('Global state has been changed.');
        return true;
    }
});
